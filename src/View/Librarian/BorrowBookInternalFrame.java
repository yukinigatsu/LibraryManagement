/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package View.Librarian;

import DAO.BookDAO;
import DAO.BorrowedBookDAO;
import DAO.ReaderDAO;
import Entities.Book;
import Entities.BorrowedBook;
import Entities.BorrowedBookId;
import Entities.Reader;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Yukino
 */
public class BorrowBookInternalFrame extends javax.swing.JInternalFrame {
    private List<Reader> ReaderList = new ArrayList<Reader>();
    private int amountBorrowedBook = 0;
    private ReaderDAO rdao = new ReaderDAO();
    private BookDAO bdao = new BookDAO();
    private BorrowedBookDAO bbdao = new BorrowedBookDAO();
    /**
     * Creates new form BorrowBookInternalFrame
     */
    public BorrowBookInternalFrame() {
        initComponents();
        loadDataListReader();
        loadDataTable();
    }
    
    private void loadDataListReader(){
       ReaderList.clear();
       ReaderList = rdao.selectAllReader();
    }
    
    private void loadDataTable(){
        DefaultTableModel dtm = new DefaultTableModel();
        dtm.addColumn("Mã thẻ");
        dtm.addColumn("Họ và tên");
        dtm.addColumn("Đơn vị");

        for (Reader i : ReaderList) {
            dtm.addRow(new Object[]{i.getIdReader(), i.getName(), i.getUnit()});
        }

        readersTable.setModel(dtm);
        this.readersTable.repaint();
        this.readersTable.revalidate();
        }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        nameBookLabel2 = new javax.swing.JLabel();
        searchBookButton = new javax.swing.JButton();
        enterIdBookTextField = new javax.swing.JTextField();
        idBookLabel = new javax.swing.JLabel();
        nameBookLabel1 = new javax.swing.JLabel();
        clearButton1 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        searchReaderButton = new javax.swing.JButton();
        clearButton = new javax.swing.JButton();
        keywordTextField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        readersTable = new javax.swing.JTable();
        idReaderLabel = new javax.swing.JLabel();
        limitLabel = new javax.swing.JLabel();
        limitValueLabel = new javax.swing.JLabel();
        addButton = new javax.swing.JButton();

        setClosable(true);
        setTitle("Thêm sách mượn");

        nameBookLabel2.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N

        searchBookButton.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        searchBookButton.setText("Tìm");
        searchBookButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBookButtonActionPerformed(evt);
            }
        });

        enterIdBookTextField.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N

        idBookLabel.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        idBookLabel.setText("Mã sách:");

        nameBookLabel1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        nameBookLabel1.setText("Tên sách:");

        clearButton1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        clearButton1.setText("Xoá");
        clearButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(idBookLabel)
                    .addComponent(nameBookLabel1))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(enterIdBookTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 305, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(searchBookButton)
                        .addGap(18, 18, 18)
                        .addComponent(clearButton1)
                        .addContainerGap())
                    .addComponent(nameBookLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(enterIdBookTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchBookButton)
                    .addComponent(idBookLabel)
                    .addComponent(clearButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameBookLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nameBookLabel1))
                .addContainerGap(33, Short.MAX_VALUE))
        );

        searchReaderButton.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        searchReaderButton.setText("Tìm");
        searchReaderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchReaderButtonActionPerformed(evt);
            }
        });

        clearButton.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        clearButton.setText("Xoá");
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        keywordTextField.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N

        readersTable.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        readersTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Mã thẻ", "Họ và tên", "Đơn vị"
            }
        ));
        readersTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                readersTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(readersTable);

        idReaderLabel.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        idReaderLabel.setText("Mã thẻ");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(idReaderLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(keywordTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 478, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(43, 43, 43)
                        .addComponent(searchReaderButton)
                        .addGap(35, 35, 35)
                        .addComponent(clearButton)
                        .addGap(0, 208, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(keywordTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchReaderButton)
                    .addComponent(clearButton)
                    .addComponent(idReaderLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 267, Short.MAX_VALUE)
                .addContainerGap())
        );

        limitLabel.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        limitLabel.setText("Số lượng sách đã mượn:");

        limitValueLabel.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        limitValueLabel.setText("1/5");

        addButton.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        addButton.setText("THÊM");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(limitLabel)
                        .addGap(18, 18, 18)
                        .addComponent(limitValueLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(105, 105, 105)
                .addComponent(addButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(limitLabel)
                    .addComponent(limitValueLabel))
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(addButton)
                .addContainerGap(400, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        keywordTextField.setText("");
    }//GEN-LAST:event_clearButtonActionPerformed

    private void clearButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButton1ActionPerformed
        enterIdBookTextField.setText("");
    }//GEN-LAST:event_clearButton1ActionPerformed

    private void searchReaderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchReaderButtonActionPerformed
        if (!keywordTextField.getText().isEmpty()) {
            ReaderList.clear();
                Reader iReader = new Reader();
                try {
                    iReader = rdao.findReaderById(Integer.parseInt(keywordTextField.getText()));
                    if (iReader != null) {
                        ReaderList.add(iReader);             
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                    
                }
                loadDataTable();
        }
        else{
            loadDataListReader();
            loadDataTable();
        }
    }//GEN-LAST:event_searchReaderButtonActionPerformed

    private void readersTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_readersTableMouseClicked
        int row = readersTable.getSelectedRow();
        List<BorrowedBook> list = new ArrayList<>();
        list = bbdao.selectBooksNotReturn(ReaderList.get(row));
        if(list == null || list.isEmpty()){
           amountBorrowedBook = 0;
           limitValueLabel.setText("0/5");
        }else {
           amountBorrowedBook = list.size();
           String amount = String.valueOf(amountBorrowedBook)+ "/5";
           limitValueLabel.setText(amount);
        }
        
    }//GEN-LAST:event_readersTableMouseClicked

    private void searchBookButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBookButtonActionPerformed
        String idBook = enterIdBookTextField.getText();
        if(idBook.isEmpty()){
            JOptionPane.showMessageDialog(this, "Vui lòng nhập mã sách!", "Thông báo", JOptionPane.ERROR_MESSAGE);
        } else{
            Book tBook = new Book();
            tBook = bdao.findBookById(Integer.parseInt(idBook));
            if(tBook != null){
                nameBookLabel2.setText(tBook.bookTitle());
            } else{
            nameBookLabel2.setText("Lỗi: Không tìm thấy sách!");
            }
        }
    }//GEN-LAST:event_searchBookButtonActionPerformed
    
    private Date defineExpiredDate(){
        Calendar c = Calendar.getInstance();
        c.add(Calendar.DAY_OF_YEAR, 21); // add 3 weeks
        Date expiredDate = c.getTime(); // vân vân.
        return expiredDate;
    }
    
    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        int row = readersTable.getSelectedRow();
        String idBook = enterIdBookTextField.getText();
        if(row == -1){
            JOptionPane.showMessageDialog(this, "Vui lòng chọn một người đọc trong danh sách!", "Thông báo", JOptionPane.ERROR_MESSAGE);
        } else if(idBook.isEmpty()){
           JOptionPane.showMessageDialog(this, "Vui lòng nhập mã sách!", "Thông báo", JOptionPane.ERROR_MESSAGE);
        } else{
            if(ReaderList.get(row).getIsExpired() == 0){
                JOptionPane.showMessageDialog(this, "Thẻ đã hết hạn!", "Thông báo", JOptionPane.ERROR_MESSAGE);
            } else if(ReaderList.get(row).getIsBlocked() == 1){
                JOptionPane.showMessageDialog(this, "Thẻ đã bị khoá!", "Thông báo", JOptionPane.ERROR_MESSAGE);
            }else if(amountBorrowedBook >= 5){
                JOptionPane.showMessageDialog(this, "Đã vượt quá số lượng sách được mượn!", "Thông báo", JOptionPane.ERROR_MESSAGE);
            } else{
                 Book tBook = new Book();
                try{ 
                   tBook = bdao.findBookById(Integer.parseInt(idBook));
                   if(tBook == null){
                      JOptionPane.showMessageDialog(this, "Mã sách không tồn tại!", "Thông báo", JOptionPane.ERROR_MESSAGE); 
                   } else if(!tBook.getStatus().equals("availible")){
                       JOptionPane.showMessageDialog(this, "Sách đã được mượn trước đó!", "Thông báo", JOptionPane.ERROR_MESSAGE); 
                   } else{
                        amountBorrowedBook++;
                        BorrowedBookId newBBookId = new BorrowedBookId(ReaderList.get(row).getIdReader(), tBook.getIdBook(), new Date());           
                        BorrowedBook newBorrowedBook =new BorrowedBook(newBBookId, tBook, ReaderList.get(row), defineExpiredDate(), (byte)0);
                        if(bbdao.addBorrowedBook(newBorrowedBook)){
                           JOptionPane.showMessageDialog(this, "Thêm sách mượn thành công!", "Thông báo", JOptionPane.INFORMATION_MESSAGE); 
                           limitValueLabel.setText(String.valueOf(amountBorrowedBook)+ "/5");
                           tBook.setStatus("borrowed");
                           bdao.updateBook(tBook);
                        } else{
                           JOptionPane.showMessageDialog(this, "Thêm sách mượn thất bại!", "Thông báo", JOptionPane.ERROR_MESSAGE);  
                        } 
              
                   }
                } catch(Exception e){
                   JOptionPane.showMessageDialog(this, "Mã sách không hợp lệ!", "Thông báo", JOptionPane.ERROR_MESSAGE);
                }        
            }
        }
         
    }//GEN-LAST:event_addButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton clearButton;
    private javax.swing.JButton clearButton1;
    private javax.swing.JTextField enterIdBookTextField;
    private javax.swing.JLabel idBookLabel;
    private javax.swing.JLabel idReaderLabel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField keywordTextField;
    private javax.swing.JLabel limitLabel;
    private javax.swing.JLabel limitValueLabel;
    private javax.swing.JLabel nameBookLabel1;
    private javax.swing.JLabel nameBookLabel2;
    private javax.swing.JTable readersTable;
    private javax.swing.JButton searchBookButton;
    private javax.swing.JButton searchReaderButton;
    // End of variables declaration//GEN-END:variables
}
